openapi: 3.0.0
info:
  title: "API Proline Photo App"
  version: "1.0.0"
  description: "API for managing photos and their coordinates"

servers:
  - url: "http://localhost:8000/api"
    description: "Local server"

components:
  securitySchemes:
    sanctumAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Photo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        photo_path:
          type: string
          example: "photos/user_1_1632362373.jpg"
        latitude:
          type: number
          format: float
          example: 40.7128
        longitude:
          type: number
          format: float
          example: -74.0060
        user_id:
          type: integer
          example: 1

    PhotoRequest:
      type: object
      required:
        - photo
        - latitude
        - longitude
      properties:
        photo:
          type: string
          format: binary
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Bruno"
        email:
          type: string
          example: "newuser@example.com"

    UserRequest:
      type: object
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          example: "Bruno"
        email:
          type: string
          example: "newuser@example.com"
        password:
          type: string
          example: "123123123"
        password_confirmation:
          type: string
          example: "123123123"

paths:
  /photos:
    post:
      summary: "Create a new photo"
      tags:
        - "Photos"
      security:
        - sanctumAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PhotoRequest"
      responses:
        "201":
          description: "Photo created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          description: "Invalid request data"

    get:
      summary: "Get all photos"
      tags:
        - "Photos"
      security:
        - sanctumAuth: []
      responses:
        "200":
          description: "List of photos"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Photo"

  /photos/{id}:
    get:
      summary: "Get a specific photo"
      tags:
        - "Photos"
      security:
        - sanctumAuth: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: integer
          description: "Photo ID"
      responses:
        "200":
          description: "Photo details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "404":
          description: "Photo not found"

    put:
      summary: "Update a specific photo"
      tags:
        - "Photos"
      security:
        - sanctumAuth: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: integer
          description: "Photo ID"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PhotoRequest"
      responses:
        "200":
          description: "Photo updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          description: "Invalid request data"
        "404":
          description: "Photo not found"

    delete:
      summary: "Delete a specific photo"
      tags:
        - "Photos"
      security:
        - sanctumAuth: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: integer
          description: "Photo ID"
      responses:
        "200":
          description: "Photo deleted successfully"
        "404":
          description: "Photo not found"

  /register:
    post:
      summary: "Register a new user"
      tags:
        - "Users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: "User registered successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid request data"

  /login:
    post:
      summary: "Login and obtain a token"
      tags:
        - "Users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "newuser@example.com"
                password:
                  type: string
                  example: "123123123"
      responses:
        "200":
          description: "Token obtained successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "your-jwt-token"
        "401":
          description: "Invalid credentials"
